obs_ = tibble(year = 1:(serie_length+time_out_fit),
x = apply(obs_, 2, mean))
g[[s]] = ggplot(rep_)+
geom_boxplot(aes(x = name, y = value, group = name, color = col))+
geom_point(data = obs_, aes(x=year, y = x), size = 3)+
scale_y_continuous(limits = c(0,1))+
theme_bw()
}
cowplot::plot_grid(g[[1]], g[[2]], ncol=2)
## Add simulation ?
n_rep = 50
time_out_fit = 100
samples_length = dim(c_related_param[[1]])[1]
switchs = c(2, 1)
rep = structure(.Data = rep(0, n_species*n_rep*(serie_length+time_out_fit)),
.Dim = c(n_species, n_rep, serie_length+time_out_fit))
z = structure(.Data = rep(0, n_species*n_site*(serie_length+time_out_fit)),
.Dim = c(n_species, n_site, serie_length+time_out_fit))
for(r in 1:n_rep){
z[,,1] = obs[,,1]
draw = sample(1:samples_length, 1)
for(i in 2:(serie_length+time_out_fit)){
for(s in 1:n_species){
# Simulate patch dynamic (including uncertainty from the posterior distributions)
z[s,,i] = sapply(z[s,,i-1]*(1-inv.logit((e_related_param[[s]][draw,] %*% t(envt_matrix))[1,] + gamma_e[draw,s]*z[switchs[s],,i-1]))+
(1-z[s,,i-1])*inv.logit((c_related_param[[s]][draw,] %*% t(envt_matrix))[1,] + gamma_c[draw,s]*z[switchs[s],,i-1]),
FUN = function(x) rbinom(1,1,x) )
}
}
rep[,r,] = apply(z[,,], c(1,3), mean)
}
# Reformat for plotting
g = list()
for(s in 1:n_species){
rep_ = as_tibble(rep[s,,]) %>%
rownames_to_column() %>%
pivot_longer(-rowname) %>%
mutate(name = map_dbl(.x = name,
.f = function(x) as.numeric(str_remove(x, 'V')))) %>%
mutate(col = case_when(name %in% 1:serie_length ~ 'fit', TRUE ~ 'extra')  )
obs_ = occupancies[s,,start_point:(start_point+serie_length-1+time_out_fit)]
obs_ = tibble(year = 1:(serie_length+time_out_fit),
x = apply(obs_, 2, mean))
g[[s]] = ggplot(rep_)+
geom_boxplot(aes(x = name, y = value, group = name, color = col))+
geom_point(data = obs_, aes(x=year, y = x), size = 3)+
scale_y_continuous(limits = c(0,1))+
theme_bw()
}
cowplot::plot_grid(g[[1]], g[[2]], ncol=2)
## Add simulation ?
n_rep = 50
time_out_fit = 100
samples_length = dim(c_related_param[[1]])[1]
switchs = c(2, 1)
rep = structure(.Data = rep(0, n_species*n_rep*(serie_length+time_out_fit)),
.Dim = c(n_species, n_rep, serie_length+time_out_fit))
z = structure(.Data = rep(0, n_species*n_site*(serie_length+time_out_fit)),
.Dim = c(n_species, n_site, serie_length+time_out_fit))
for(r in 1:n_rep){
z[,,1] = obs[,,1]
draw = sample(1:samples_length, 1)
for(i in 2:(serie_length+time_out_fit)){
for(s in 1:n_species){
# Simulate patch dynamic (including uncertainty from the posterior distributions)
z[s,,i] = sapply(z[s,,i-1]*(1-inv.logit((e_related_param[[s]][draw,] %*% t(envt_matrix))[1,]))+
(1-z[s,,i-1])*inv.logit((c_related_param[[s]][draw,] %*% t(envt_matrix))[1,] ),
FUN = function(x) rbinom(1,1,x) )
}
}
rep[,r,] = apply(z[,,], c(1,3), mean)
}
# Reformat for plotting
g = list()
for(s in 1:n_species){
rep_ = as_tibble(rep[s,,]) %>%
rownames_to_column() %>%
pivot_longer(-rowname) %>%
mutate(name = map_dbl(.x = name,
.f = function(x) as.numeric(str_remove(x, 'V')))) %>%
mutate(col = case_when(name %in% 1:serie_length ~ 'fit', TRUE ~ 'extra')  )
obs_ = occupancies[s,,start_point:(start_point+serie_length-1+time_out_fit)]
obs_ = tibble(year = 1:(serie_length+time_out_fit),
x = apply(obs_, 2, mean))
g[[s]] = ggplot(rep_)+
geom_boxplot(aes(x = name, y = value, group = name, color = col))+
geom_point(data = obs_, aes(x=year, y = x), size = 3)+
scale_y_continuous(limits = c(0,1))+
theme_bw()
}
cowplot::plot_grid(g[[1]], g[[2]], ncol=2)
n_patch = 200
n_species = 2
# Define environmental optima
envt_opt = c(0.40, 0.6)
sim = simulate_MC(patches = n_patch,     # Number of patch
species = n_species,   # Number of species
kernel_exp = 0.001,    # Rate of decrease of disp. kernel (e.g. P(disp) = exp(-kernel_exp*dist(i,j)))
env1Scale = 100,       # Low spatial autocorrelation for envt (not important)
env_optima = envt_opt, # Environmental effects are Gaussian around optimum
env_niche_breadth = 0.09, # Niche breadth (~ sd of the Gaussian)
int_mat = matrix( c(0.05,0.0,
0.0,0.05) , nrow = 2, ncol = 2), # Interaction matrix
local_start = F) # Whether to start with clusered pop. or not
data_envt = get_envt(sim)
abundances = sim_to_matrix(sim)
occupancies = abund_to_occ(abundances)
plots_occupancies(occupancies)
n_patch = 200
n_species = 2
# Define environmental optima
envt_opt = c(0.40, 0.6)
sim = simulate_MC(patches = n_patch,     # Number of patch
species = n_species,   # Number of species
kernel_exp = 0.001,    # Rate of decrease of disp. kernel (e.g. P(disp) = exp(-kernel_exp*dist(i,j)))
env1Scale = 100,       # Low spatial autocorrelation for envt (not important)
env_optima = envt_opt, # Environmental effects are Gaussian around optimum
env_niche_breadth = 0.09, # Niche breadth (~ sd of the Gaussian)
int_mat = matrix( c(0.05,0.0,
0.0,0.05) , nrow = 2, ncol = 2), # Interaction matrix
local_start = F) # Whether to start with clusered pop. or not
data_envt = get_envt(sim)
abundances = sim_to_matrix(sim)
occupancies = abund_to_occ(abundances)
plots_occupancies(occupancies)
?simulate_MC
knitr::opts_chunk$set(echo = TRUE)
n_patch = 200
n_species = 2
# Define environmental optima
envt_opt = c(0.40, 0.6)
sim = simulate_MC(patches = n_patch,     # Number of patch
species = n_species,   # Number of species
kernel_exp = 0.001,    # Rate of decrease of disp. kernel (e.g. P(disp) = exp(-kernel_exp*dist(i,j)))
env1Scale = 100,       # Low spatial autocorrelation for envt (not important)
env_optima = envt_opt, # Environmental effects are Gaussian around optimum
env_niche_breadth = 0.09, # Niche breadth (~ sd of the Gaussian)
int_mat = matrix( c(0.05,0.1,
0.01,0.05) , nrow = 2, ncol = 2), # Interaction matrix
local_start = F) # Whether to start with clusered pop. or not
library(tidyverse)
library(TMDSpatial)
sim = simulate_MC(patches = n_patch,     # Number of patch
species = n_species,   # Number of species
kernel_exp = 0.001,    # Rate of decrease of disp. kernel (e.g. P(disp) = exp(-kernel_exp*dist(i,j)))
env1Scale = 100,       # Low spatial autocorrelation for envt (not important)
env_optima = envt_opt, # Environmental effects are Gaussian around optimum
env_niche_breadth = 0.09, # Niche breadth (~ sd of the Gaussian)
int_mat = matrix( c(0.05,0.1,
0.01,0.05) , nrow = 2, ncol = 2), # Interaction matrix
local_start = F) # Whether to start with clusered pop. or not
data_envt = get_envt(sim)
abundances = sim_to_matrix(sim)
occupancies = abund_to_occ(abundances)
plots_occupancies(occupancies)
sim$env.df
n_patch = 200
n_species = 2
# Define environmental optima
envt_opt = c(0.40, 0.6)
env.df = sim$env.df
landscape = sim$landscape
sim2 = simulate_MC(patches = n_patch,     # Number of patch
species = n_species,   # Number of species
kernel_exp = 0.001,    # Rate of decrease of disp. kernel (e.g. P(disp) = exp(-kernel_exp*dist(i,j)))
env1Scale = 100,       # Low spatial autocorrelation for envt (not important)
env_optima = envt_opt, # Environmental effects are Gaussian around optimum
env_niche_breadth = 0.09, # Niche breadth (~ sd of the Gaussian)
int_mat = matrix( c(0.05,0.0,
0.0,0.05) , nrow = 2, ncol = 2), # Interaction matrix
local_start = F,
env.df = env.df,
landscape = landscape)
head(sim$env.df)
sim$env.df[,-'time_run']
sim$env.df[,-c('time_run')]
sim$env.df %>% select(-time_run)
env.df = sim$env.df %>% select(-time_run)
landscape = sim$landscape
sim2 = simulate_MC(patches = n_patch,     # Number of patch
species = n_species,   # Number of species
kernel_exp = 0.001,    # Rate of decrease of disp. kernel (e.g. P(disp) = exp(-kernel_exp*dist(i,j)))
env1Scale = 100,       # Low spatial autocorrelation for envt (not important)
env_optima = envt_opt, # Environmental effects are Gaussian around optimum
env_niche_breadth = 0.09, # Niche breadth (~ sd of the Gaussian)
int_mat = matrix( c(0.05,0.0,
0.0,0.05) , nrow = 2, ncol = 2), # Interaction matrix
local_start = F,
env.df = env.df,
landscape = landscape)
sim2 = simulate_MC(patches = n_patch,     # Number of patch
species = n_species,   # Number of species
kernel_exp = 0.001,    # Rate of decrease of disp. kernel (e.g. P(disp) = exp(-kernel_exp*dist(i,j)))
env1Scale = 100,       # Low spatial autocorrelation for envt (not important)
env_optima = envt_opt, # Environmental effects are Gaussian around optimum
env_niche_breadth = 0.09, # Niche breadth (~ sd of the Gaussian)
int_mat = matrix( c(0.05,0.0,
0.0,0.05) , nrow = 2, ncol = 2), # Interaction matrix
local_start = F)
data_envt = get_envt(sim)
abundances = sim_to_matrix(sim)
occupancies = abund_to_occ(abundances)
plots_occupancies(occupancies)
knitr::opts_chunk$set(echo = TRUE, fig.width = 15)
n_patch = 200
n_species = 1
# Define environmental optima
envt_opt = c(0.35, 0.65)
sim = simulate_MC(patches = n_patch,     # Number of patch
species = n_species,   # Number of species
kernel_exp = 0.001,    # Rate of decrease of disp. kernel (e.g. P(disp) = exp(-kernel_exp*dist(i,j)))
env1Scale = 100,       # Low spatial autocorrelation for envt (not important)
env_optima = envt_opt, # Environmental effects are Gaussian around optimum
env_niche_breadth = 0.07, # Niche breadth (~ sd of the Gaussian)
int_mat = matrix( c(0.05,0.00,
0.00,0.05) , nrow = 2, ncol = 2), # Interaction matrix
local_start = F) # Whether to start with clusered pop. or not
# Define environmental optima
envt_opt = c(0.35, 0.65)
sim = simulate_MC(patches = n_patch,     # Number of patch
species = n_species,   # Number of species
kernel_exp = 0.001,    # Rate of decrease of disp. kernel (e.g. P(disp) = exp(-kernel_exp*dist(i,j)))
env1Scale = 100,       # Low spatial autocorrelation for envt (not important)
env_optima = envt_opt, # Environmental effects are Gaussian around optimum
env_niche_breadth = 0.07, # Niche breadth (~ sd of the Gaussian)
int_mat = matrix( c(0.05,0.00,
0.00,0.05) , nrow = 2, ncol = 2), # Interaction matrix
local_start = F) # Whether to start with clusered pop. or not
knitr::opts_chunk$set(echo = TRUE, fig.width = 15)
plot_envt_effect = function(env1, c_boot, e_boot, envt_opt){
p_boot = c_boot / (e_boot+c_boot)
to_p=tibble(x = env1,
median = apply(p_boot,2,median),
q_min = apply(p_boot,2,quantile, 0.025),
q_max = apply(p_boot,2,quantile, 0.975),
param = "expect_p")
to_c=tibble(x = env1,
median = apply(c_boot,2,median),
q_min = apply(c_boot,2,quantile, 0.025),
q_max = apply(c_boot,2,quantile, 0.975),
param = "col.")
to_e=tibble(x = env1,
median = apply(e_boot,2,median),
q_min = apply(e_boot,2,quantile, 0.025),
q_max = apply(e_boot,2,quantile, 0.975),
param = "ext.")
toplot = rbind(to_p, to_c, to_e)
ggplot(toplot, aes(x = x, y = median, color = param))+
geom_point()+
geom_ribbon(aes(ymin = q_min, ymax = q_max), alpha = 0.1)+
geom_vline(xintercept= envt_opt )+
scale_y_continuous(limits=c(0,1))+
theme_bw()
}
library(TMDSpatial)
library(R2jags)
# Some additional packages might be needed:
library(tidyverse)
n_patch = 200
n_species = 1
# Define environmental optima
envt_opt = c(0.35, 0.65)
sim = simulate_MC(patches = n_patch,     # Number of patch
species = n_species,   # Number of species
kernel_exp = 0.001,    # Rate of decrease of disp. kernel (e.g. P(disp) = exp(-kernel_exp*dist(i,j)))
env1Scale = 100,       # Low spatial autocorrelation for envt (not important)
env_optima = envt_opt, # Environmental effects are Gaussian around optimum
env_niche_breadth = 0.07, # Niche breadth (~ sd of the Gaussian)
int_mat = matrix( c(0.05,0.00,
0.00,0.05) , nrow = 2, ncol = 2), # Interaction matrix
local_start = F) # Whether to start with clusered pop. or not
sim = simulate_MC(patches = n_patch,     # Number of patch
species = n_species,   # Number of species
kernel_exp = 0.001,    # Rate of decrease of disp. kernel (e.g. P(disp) = exp(-kernel_exp*dist(i,j)))
env1Scale = 100,       # Low spatial autocorrelation for envt (not important)
env_optima = c(0.35, 0.65), # Environmental effects are Gaussian around optimum
env_niche_breadth = 0.07, # Niche breadth (~ sd of the Gaussian)
int_mat = matrix( c(0.05,0.00,
0.00,0.05) , nrow = 2, ncol = 2), # Interaction matrix
local_start = F) # Whether to start with clusered pop. or not
?simulate_MC
---
title: "Practical II"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r, echo = F}
plot_envt_effect = function(env1, c_boot, e_boot, envt_opt){
p_boot = c_boot / (e_boot+c_boot)
to_p=tibble(x = env1,
median = apply(p_boot,2,median),
q_min = apply(p_boot,2,quantile, 0.025),
q_max = apply(p_boot,2,quantile, 0.975),
param = "expect_p")
to_c=tibble(x = env1,
median = apply(c_boot,2,median),
q_min = apply(c_boot,2,quantile, 0.025),
q_max = apply(c_boot,2,quantile, 0.975),
param = "col.")
to_e=tibble(x = env1,
median = apply(e_boot,2,median),
q_min = apply(e_boot,2,quantile, 0.025),
q_max = apply(e_boot,2,quantile, 0.975),
param = "ext.")
toplot = rbind(to_p, to_c, to_e)
ggplot(toplot, aes(x = x, y = median, color = param))+
geom_point()+
geom_ribbon(aes(ymin = q_min, ymax = q_max), alpha = 0.1)+
geom_vline(xintercept= envt_opt )+
scale_y_continuous(limits=c(0,1))+
theme_bw()
}
```
## The simulation framework
### Install
Borrow from Thompson et al. (2020) and slightly modified.
To install from GitHub
```{r, eval=F}
devtools::install_github("mxdub/TMDSpatial")
```
You'll also need JAGS and R2jags :
JAGS can be download & installed from : <https://sourceforge.net/projects/mcmc-jags/files/>
R2jags, with the install.package() from R.
```{r, message=F, output = F, results='hide', warning=FALSE}
library(TMDSpatial)
library(R2jags)
# Some additional packages might be needed:
library(tidyverse)
```
### Use
Function is quickly described on GitHub - see Thompson et al. (2020) for details on implementation. The overall idea :
![](ThompsonFramework.JPG)
We are going to use only the simulation function : *simulate_MC()*. All parameters can be view in the help (?simulate_MC()). Main parameters are already set for our use here.
For occupancy models, we will use only two species.
The typical use of that function :
```{r, message=F, output = F, results='hide', warning=FALSE}
n_patch = 200
n_species = 2
# Define environmental optima
envt_opt = c(0.35, 0.65)
sim = simulate_MC(patches = n_patch,     # Number of patch
species = n_species,   # Number of species
kernel_exp = 0.001,    # Rate of decrease of disp. kernel (e.g. P(disp) = exp(-kernel_exp*dist(i,j)))
env1Scale = 100,       # Low spatial autocorrelation for envt (not important)
env_optima = envt_opt, # Environmental effects are Gaussian around optimum
env_niche_breadth = 0.07, # Niche breadth (~ sd of the Gaussian)
int_mat = matrix( c(0.05,0.00,
0.00,0.05) , nrow = 2, ncol = 2), # Interaction matrix
local_start = T) # Whether to start with clusered pop. or not
knitr::opts_chunk$set(echo = TRUE)
data_envt = get_envt(sim)
data_geo = get_geoposition(sim)
abundances = sim_to_matrix(sim)
occupancies = abund_to_occ(abundances)
plots_occupancies(occupancies)
serie_length = 20
start_point = 10
species = 1
obs = occupancies[,,start_point:(start_point+serie_length-1)]
obs = obs[species,,]
plot(apply(obs[,], 2, mean), ylim = c(0,1))
# Define # of patch & # of years
n_site = dim(obs)[1]
n_year = dim(obs)[2]
# Create a datalist for JAGS (with needed variables)
datax <- list(obs = obs,
n_site = dim(obs)[1],
n_year = dim(obs)[2])
# And also some inits values (only for patch state - needed to replace NA)
x = obs
x[is.na(x)] = sample(c(0,1), sum(is.na(x)), replace = T)
inits = list(list(x = x))
parameters <- c('e', 'c', 'psi', 'detec')
jm = jags(model.file = "./model/MacKenzie_mp",
data = datax,
inits = inits,
n.chains = 1,
n.iter = 1000,
n.burnin = 500,
n.thin = 5,
parameters.to.save = parameters)
# traceplot(jm)
# Estimates from JAGS
print(jm)
# Comparing simulated from estimates to observed
# Gather parameters from JAGS (whole sampled posterior distribution)
e = jm$BUGSoutput$sims.list$e
c = jm$BUGSoutput$sims.list$c
# Set parameters for simulation (50 replicates, for 100 more time steps than used for fitting)
n_rep = 50
time_out_fit = 100
samples_length = length(e)
rep = matrix(0, ncol = serie_length+time_out_fit, nrow = n_rep)
z = matrix(0, ncol = serie_length+time_out_fit, nrow = n_site)
for(r in 1:n_rep){
z[,1] = obs[,1]
draw = sample(1:samples_length, 1)
for(i in 2:(serie_length+time_out_fit))
# Simulate patch dynamic (including uncertainty from the posterior distributions)
z[,i] = sapply(z[,i-1]*(1-e[draw])+(1-z[,i-1])*c[draw], FUN = function(x) rbinom(1,1,x) )
rep[r,] = apply(z, 2, mean)
}
# Reformat for plotting
rep = as_tibble(rep) %>%
rownames_to_column() %>%
pivot_longer(-rowname) %>%
mutate(name = map_dbl(.x = name,
.f = function(x) as.numeric(str_remove(x, 'V')))) %>%
mutate(col = case_when(name %in% 1:serie_length ~ 'fit', TRUE ~ 'extra')  )
obs_ = occupancies[species,,start_point:(start_point+serie_length-1+time_out_fit)]
obs_ = tibble(year = 1:(serie_length+time_out_fit),
x = apply(obs_, 2, mean))
ggplot(rep)+
geom_boxplot(aes(x = name, y = value, group = name, color = col))+
geom_point(data = obs_, aes(x=year, y = x), size = 3)+
scale_y_continuous(limits = c(0,1))+
labs(y='Occupancy', x='Time Step')+
theme_bw()
parameters <- c('e', 'c', 'psi', 'detec')
jm = jags(model.file = "./model/Levins_like",
data = datax,
inits = inits,
n.chains = 1,
n.iter = 1000,
n.burnin = 500,
n.thin = 5,
parameters.to.save = parameters)
# traceplot(jm)
print(jm)
# Simulated
e = jm$BUGSoutput$sims.list$e
c = jm$BUGSoutput$sims.list$c
time_out_fit = 100
samples_length = length(e)
rep = matrix(0, ncol = serie_length+time_out_fit, nrow = n_rep)
z = matrix(0, ncol = serie_length+time_out_fit, nrow = n_site)
for(r in 1:n_rep){
z[,1] = obs[,1]
draw = sample(1:samples_length, 1)
for(i in 2:(serie_length+time_out_fit))
z[,i] = sapply(z[,i-1]*(1-e[draw])+(1-z[,i-1])*(1-exp(-c[draw]*mean(z[,i-1]))), FUN = function(x) rbinom(1,1,x) )
rep[r,] = apply(z, 2, mean)
}
# Reformat for plotting
rep = as_tibble(rep) %>%
rownames_to_column() %>%
pivot_longer(-rowname) %>%
mutate(name = map_dbl(.x = name,
.f = function(x) as.numeric(str_remove(x, 'V')))) %>%
mutate(col = case_when(name %in% 1:serie_length ~ 'fit', TRUE ~ 'extra')  )
obs_ = occupancies[species,,start_point:(start_point+serie_length-1+time_out_fit)]
obs_ = tibble(year = 1:(serie_length+time_out_fit),
x = apply(obs_, 2, mean))
ggplot(rep)+
geom_boxplot(aes(x = name, y = value, group = name, color = col))+
geom_point(data = obs_, aes(x=year, y = x), size = 3)+
scale_y_continuous(limits = c(0,1))+
labs(y='Occupancy', x='Time Steps')+
theme_bw()
file.edit(".gitignore")
package_version()
package_version("RandomFields")
package_version("RandomFields")
packageVersion("RandomFields")
packageVersion('EcoSimR')
install.packages('CompRandFld')
RandomFields::RMexp
?RandomFields::RMexp
?RandomFields::RMnugget
?RandomFields::RMtrend
?decostand
model <- RandomFields::RMexp(var=0.5, scale=env1Scale) + # with variance 4 and scale 10
RandomFields::RMnugget(var=0) + # nugget
RandomFields::RMtrend(mean=0.05) # and mean
RF <- RandomFields::RFsimulate(model = model,x = landscape$x*10, y = landscape$y*10, T = NULL, spConform=FALSE)
env.df <- data.frame(env1 = vegan::decostand(RF,method = "range"),
patch = 1:nrow(landscape), time = rep(1:timesteps, each = nrow(landscape)))
env1scale = 500
model <- RandomFields::RMexp(var=0.5, scale=env1Scale) + # with variance 4 and scale 10
RandomFields::RMnugget(var=0) + # nugget
RandomFields::RMtrend(mean=0.05) # and mean
RandomFields::RMexp(var=0.5, scale=env1Scale)
model <- RandomFields::RMexp(var=0.5, scale=500) + # with variance 4 and scale 10
RandomFields::RMnugget(var=0) + # nugget
RandomFields::RMtrend(mean=0.05) # and mean
RF <- RandomFields::RFsimulate(model = model,x = landscape$x*10, y = landscape$y*10, T = NULL, spConform=FALSE)
TMDSpatial::landscape_generate(100)
landscape = TMDSpatial::landscape_generate(100)
landscape
model <- RandomFields::RMexp(var=0.5, scale=500) + # with variance 4 and scale 10
RandomFields::RMnugget(var=0) + # nugget
RandomFields::RMtrend(mean=0.05) # and mean
RF <- RandomFields::RFsimulate(model = model,x = landscape$x*10, y = landscape$y*10, T = NULL, spConform=FALSE)
RF
?RFsimulate
dist <- as.matrix(dist(landscape))
## generating autocorrelated gaussians
omega1 <- exp(str*dist)
weights <- chol(solve(omega1))
## generating autocorrelated gaussians
omega1 <- exp(-0.1*dist)
weights <- chol(solve(omega1))
weights_inv <- solve(weights)
error <- weights_inv %*% rnorm(dim(dist)[1])
error
?RandomFields::RMexp
vegan::decostand(error, method = "range")
mean(vegan::decostand(error, method = "range"))
sd(vegan::decostand(error, method = "range"))
hist(vegan::decostand(error, method = "range"))
