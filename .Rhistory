# Create a datalist for JAGS (with needed variables)
datax <- list(obs = obs,
n_species = n_species,
n_site = n_site,
n_year = n_year,
envt = dt_envt_scaled)
parameters <- c('psi', 'mu_c', 'mu_e', 'beta_c', 'beta_e', 'beta_sqr_c', 'beta_sqr_e')
# And also some inits values (only for patch state - needed to replace NA)
x = obs
x[is.na(x)] = sample(c(0,1), sum(is.na(x)), replace = T)
inits = list(list(x = x))
jm = jags(model.file = "./model/MacKenzie_mp_envt_morespecies",
data = datax,
inits = inits,
n.chains = 1,
n.iter = 2000,
n.burnin = 500,
n.thin = 5,
parameters.to.save = parameters)
print(jm)
c_related_param = list(jm$BUGSoutput$sims.array[,1,c('mu_c[1]', 'beta_c[1]', 'beta_sqr_c[1]')],
jm$BUGSoutput$sims.array[,1,c('mu_c[2]', 'beta_c[2]', 'beta_sqr_c[2]')])
e_related_param = list(jm$BUGSoutput$sims.array[,1,c('mu_e[1]', 'beta_e[1]', 'beta_sqr_e[1]')],
jm$BUGSoutput$sims.array[,1,c('mu_e[2]', 'beta_e[2]', 'beta_sqr_e[2]')])
envt_matrix = as.matrix(tibble(intcp = 1, env1 = dt_envt_scaled[,1]) %>% mutate(env1sqr = env1^2))
c_boot = list( inv.logit(c_related_param[[1]] %*% t(envt_matrix)),
inv.logit(c_related_param[[2]] %*% t(envt_matrix)) )
e_boot = list( inv.logit(e_related_param[[1]] %*% t(envt_matrix)),
inv.logit(e_related_param[[2]] %*% t(envt_matrix)) )
cowplot::plot_grid(plot_envt_effect(data_envt$env1, c_boot[[1]], e_boot[[1]], envt_opt[1]),
plot_envt_effect(data_envt$env1, c_boot[[2]], e_boot[[2]], envt_opt[2]),
ncol = 2)
## Presence probabilities
p_boot = list(c_boot[[1]]/(c_boot[[1]]+e_boot[[1]]),
c_boot[[2]]/(c_boot[[2]]+e_boot[[2]]))
plot(apply(p_boot[[1]], 2, median) ~ apply(occupancies[1,,], 1, mean), xlim = c(0,1), ylim = c(0,1))
abline(a=0, b=1, add = TRUE)
plot(apply(p_boot[[2]], 2, median) ~ apply(occupancies[2,,], 1, mean), xlim = c(0,1), ylim = c(0,1))
abline(a=0, b=1, add = TRUE)
## Add simulation ?
n_rep = 50
time_out_fit = 100
samples_length = dim(c_related_param[[1]])[1]
rep = structure(.Data = rep(0, n_species*n_rep*(serie_length+time_out_fit)),
.Dim = c(n_species, n_rep, serie_length+time_out_fit))
z = structure(.Data = rep(0, n_species*n_site*(serie_length+time_out_fit)),
.Dim = c(n_species, n_site, serie_length+time_out_fit))
for(r in 1:n_rep){
z[,,1] = obs[,,1]
draw = sample(1:samples_length, 1)
for(i in 2:(serie_length+time_out_fit)){
for(s in 1:n_species){
# Simulate patch dynamic (including uncertainty from the posterior distributions)
z[s,,i] = sapply(z[s,,i-1]*(1-inv.logit((e_related_param[[s]][draw,] %*% t(envt_matrix))[1,]))+
(1-z[s,,i-1])*inv.logit((c_related_param[[s]][draw,] %*% t(envt_matrix))[1,]),
FUN = function(x) rbinom(1,1,x) )
}
}
rep[,r,] = apply(z[,,], c(1,3), mean)
}
# Reformat for plotting
g = list()
for(s in 1:n_species){
rep_ = as_tibble(rep[s,,]) %>%
rownames_to_column() %>%
pivot_longer(-rowname) %>%
mutate(name = map_dbl(.x = name,
.f = function(x) as.numeric(str_remove(x, 'V')))) %>%
mutate(col = case_when(name %in% 1:serie_length ~ 'fit', TRUE ~ 'extra')  )
obs_ = occupancies[s,,start_point:(start_point+serie_length-1+time_out_fit)]
obs_ = tibble(year = 1:(serie_length+time_out_fit),
x = apply(obs_, 2, mean))
g[[s]] = ggplot(rep_)+
geom_boxplot(aes(x = name, y = value, group = name, color = col))+
geom_point(data = obs_, aes(x=year, y = x), size = 3)+
scale_y_continuous(limits = c(0,1))+
theme_bw()
}
cowplot::plot_grid(g[[1]], g[[2]], ncol=2)
jm = jags(model.file = "./model/Levins_like_envt_morespecies",
data = datax,
inits = inits,
n.chains = 1,
n.iter = 2000,
n.burnin = 500,
n.thin = 5,
parameters.to.save = parameters)
print(jm)
c_related_param = list(jm$BUGSoutput$sims.array[,1,c('mu_c[1]', 'beta_c[1]', 'beta_sqr_c[1]')],
jm$BUGSoutput$sims.array[,1,c('mu_c[2]', 'beta_c[2]', 'beta_sqr_c[2]')])
e_related_param = list(jm$BUGSoutput$sims.array[,1,c('mu_e[1]', 'beta_e[1]', 'beta_sqr_e[1]')],
jm$BUGSoutput$sims.array[,1,c('mu_e[2]', 'beta_e[2]', 'beta_sqr_e[2]')])
#
# c_boot = (1-exp(-exp(c_related_param %*% t(envt_matrix))*mp_occupancy))
# e_boot = inv.logit(e_related_param %*% t(envt_matrix))
envt_matrix = as.matrix(tibble(intcp = 1, env1 = dt_envt_scaled[,1]) %>% mutate(env1sqr = env1^2))
mp_occupancy = 1 # Assuming a full metapopulation
c_boot = list( (1-exp(-exp(c_related_param[[1]] %*% t(envt_matrix))*mp_occupancy)),
(1-exp(-exp(c_related_param[[2]] %*% t(envt_matrix))*mp_occupancy)) )
e_boot = list( inv.logit(e_related_param[[1]] %*% t(envt_matrix)),
inv.logit(e_related_param[[2]] %*% t(envt_matrix)) )
cowplot::plot_grid(plot_envt_effect(data_envt$env1, c_boot[[1]], e_boot[[1]], envt_opt[1]),
plot_envt_effect(data_envt$env1, c_boot[[2]], e_boot[[2]], envt_opt[2]),
ncol = 2)
## Add simulation ?
n_rep = 50
time_out_fit = 100
samples_length = dim(c_related_param[[1]])[1]
rep = structure(.Data = rep(0, n_species*n_rep*(serie_length+time_out_fit)),
.Dim = c(n_species, n_rep, serie_length+time_out_fit))
z = structure(.Data = rep(0, n_species*n_site*(serie_length+time_out_fit)),
.Dim = c(n_species, n_site, serie_length+time_out_fit))
for(r in 1:n_rep){
z[,,1] = obs[,,1]
draw = sample(1:samples_length, 1)
for(i in 2:(serie_length+time_out_fit)){
for(s in 1:n_species){
# Simulate patch dynamic (including uncertainty from the posterior distributions)
z[s,,i] = sapply(z[s,,i-1]*(1-inv.logit((e_related_param[[s]][draw,] %*% t(envt_matrix))[1,]))+
(1-z[s,,i-1])*(1-exp(-(exp(c_related_param[[s]][draw,] %*% t(envt_matrix))[1,]*mean(z[s,,i-1]))) ),
FUN = function(x) rbinom(1,1,x) )
}
}
rep[,r,] = apply(z[,,], c(1,3), mean)
}
# Reformat for plotting
g = list()
for(s in 1:n_species){
rep_ = as_tibble(rep[s,,]) %>%
rownames_to_column() %>%
pivot_longer(-rowname) %>%
mutate(name = map_dbl(.x = name,
.f = function(x) as.numeric(str_remove(x, 'V')))) %>%
mutate(col = case_when(name %in% 1:serie_length ~ 'fit', TRUE ~ 'extra')  )
obs_ = occupancies[s,,start_point:(start_point+serie_length-1+time_out_fit)]
obs_ = tibble(year = 1:(serie_length+time_out_fit),
x = apply(obs_, 2, mean))
g[[s]] = ggplot(rep_)+
geom_boxplot(aes(x = name, y = value, group = name, color = col))+
geom_point(data = obs_, aes(x=year, y = x), size = 3)+
scale_y_continuous(limits = c(0,1))+
theme_bw()
}
cowplot::plot_grid(g[[1]], g[[2]], ncol=2)
datax <- list(obs = obs,
n_species = n_species,
n_site = n_site,
n_year = n_year,
envt = dt_envt_scaled,
switch = c(2,1) )
parameters <- c('psi', 'mu_c', 'mu_e', 'beta_c', 'beta_e', 'beta_sqr_c', 'beta_sqr_e', 'gamma_e', 'gamma_c')
jm = jags(model.file = "./model/MacKenzie_mp_envt_morespecies_interacting",
data = datax,
inits = inits,
n.chains = 1,
n.iter = 3000,
n.burnin = 100,
n.thin = 5,
parameters.to.save = parameters)
print(jm)
c_related_param = list(jm$BUGSoutput$sims.array[,1,c('mu_c[1]', 'beta_c[1]', 'beta_sqr_c[1]')],
jm$BUGSoutput$sims.array[,1,c('mu_c[2]', 'beta_c[2]', 'beta_sqr_c[2]')])
e_related_param = list(jm$BUGSoutput$sims.array[,1,c('mu_e[1]', 'beta_e[1]', 'beta_sqr_e[1]')],
jm$BUGSoutput$sims.array[,1,c('mu_e[2]', 'beta_e[2]', 'beta_sqr_e[2]')])
#
# c_boot = (1-exp(-exp(c_related_param %*% t(envt_matrix))*mp_occupancy))
# e_boot = inv.logit(e_related_param %*% t(envt_matrix))
envt_matrix = as.matrix(tibble(intcp = 1, env1 = dt_envt_scaled[,1]) %>% mutate(env1sqr = env1^2))
c_boot = list( inv.logit(c_related_param[[1]] %*% t(envt_matrix)),
inv.logit(c_related_param[[2]] %*% t(envt_matrix)) )
e_boot = list( inv.logit(e_related_param[[1]] %*% t(envt_matrix)),
inv.logit(e_related_param[[2]] %*% t(envt_matrix)) )
gamma_e = jm$BUGSoutput$sims.array[,1,c('gamma_e[1]', 'gamma_e[2]')]
gamma_c = jm$BUGSoutput$sims.array[,1,c('gamma_c[1]', 'gamma_c[2]')]
cowplot::plot_grid(plot_envt_effect(data_envt$env1, c_boot[[1]], e_boot[[1]], envt_opt[1]),
plot_envt_effect(data_envt$env1, c_boot[[2]], e_boot[[2]], envt_opt[2]),
ncol = 2)
## Add simulation ?
n_rep = 50
time_out_fit = 100
samples_length = dim(c_related_param[[1]])[1]
switchs = c(2, 1)
rep = structure(.Data = rep(0, n_species*n_rep*(serie_length+time_out_fit)),
.Dim = c(n_species, n_rep, serie_length+time_out_fit))
z = structure(.Data = rep(0, n_species*n_site*(serie_length+time_out_fit)),
.Dim = c(n_species, n_site, serie_length+time_out_fit))
for(r in 1:n_rep){
z[s,,1] = obs[s,,1]
draw = sample(1:samples_length, 1)
for(i in 2:(serie_length+time_out_fit)){
for(s in 1:n_species){
# Simulate patch dynamic (including uncertainty from the posterior distributions)
z[s,,i] = sapply(z[s,,i-1]*(1-inv.logit((e_related_param[[s]][draw,] %*% t(envt_matrix))[1,] + gamma_e[draw,s]*z[switchs[s],,i-1]))+
(1-z[s,,i-1])*inv.logit((c_related_param[[s]][draw,] %*% t(envt_matrix))[1,] + gamma_c[draw,s]*z[switchs[s],,i-1]),
FUN = function(x) rbinom(1,1,x) )
}
}
rep[,r,] = apply(z[,,], 2, mean)
}
## Add simulation ?
n_rep = 50
time_out_fit = 100
samples_length = dim(c_related_param[[1]])[1]
switchs = c(2, 1)
rep = structure(.Data = rep(0, n_species*n_rep*(serie_length+time_out_fit)),
.Dim = c(n_species, n_rep, serie_length+time_out_fit))
z = structure(.Data = rep(0, n_species*n_site*(serie_length+time_out_fit)),
.Dim = c(n_species, n_site, serie_length+time_out_fit))
for(r in 1:n_rep){
z[s,,1] = obs[s,,1]
draw = sample(1:samples_length, 1)
for(i in 2:(serie_length+time_out_fit)){
for(s in 1:n_species){
# Simulate patch dynamic (including uncertainty from the posterior distributions)
z[s,,i] = sapply(z[s,,i-1]*(1-inv.logit((e_related_param[[s]][draw,] %*% t(envt_matrix))[1,] + gamma_e[draw,s]*z[switchs[s],,i-1]))+
(1-z[s,,i-1])*inv.logit((c_related_param[[s]][draw,] %*% t(envt_matrix))[1,] + gamma_c[draw,s]*z[switchs[s],,i-1]),
FUN = function(x) rbinom(1,1,x) )
}
}
rep[,r,] = apply(z[,,], c(1,3), mean)
}
# Reformat for plotting
g = list()
for(s in 1:n_species){
rep_ = as_tibble(rep[s,,]) %>%
rownames_to_column() %>%
pivot_longer(-rowname) %>%
mutate(name = map_dbl(.x = name,
.f = function(x) as.numeric(str_remove(x, 'V')))) %>%
mutate(col = case_when(name %in% 1:serie_length ~ 'fit', TRUE ~ 'extra')  )
obs_ = occupancies[s,,start_point:(start_point+serie_length-1+time_out_fit)]
obs_ = tibble(year = 1:(serie_length+time_out_fit),
x = apply(obs_, 2, mean))
g[[s]] = ggplot(rep_)+
geom_boxplot(aes(x = name, y = value, group = name, color = col))+
geom_point(data = obs_, aes(x=year, y = x), size = 3)+
scale_y_continuous(limits = c(0,1))+
theme_bw()
}
cowplot::plot_grid(g[[1]], g[[2]], ncol=2)
## Add simulation ?
n_rep = 50
time_out_fit = 100
samples_length = dim(c_related_param[[1]])[1]
switchs = c(2, 1)
rep = structure(.Data = rep(0, n_species*n_rep*(serie_length+time_out_fit)),
.Dim = c(n_species, n_rep, serie_length+time_out_fit))
z = structure(.Data = rep(0, n_species*n_site*(serie_length+time_out_fit)),
.Dim = c(n_species, n_site, serie_length+time_out_fit))
for(r in 1:n_rep){
z[,,1] = obs[,,1]
draw = sample(1:samples_length, 1)
for(i in 2:(serie_length+time_out_fit)){
for(s in 1:n_species){
# Simulate patch dynamic (including uncertainty from the posterior distributions)
z[s,,i] = sapply(z[s,,i-1]*(1-inv.logit((e_related_param[[s]][draw,] %*% t(envt_matrix))[1,] + gamma_e[draw,s]*z[switchs[s],,i-1]))+
(1-z[s,,i-1])*inv.logit((c_related_param[[s]][draw,] %*% t(envt_matrix))[1,] + gamma_c[draw,s]*z[switchs[s],,i-1]),
FUN = function(x) rbinom(1,1,x) )
}
}
rep[,r,] = apply(z[,,], c(1,3), mean)
}
# Reformat for plotting
g = list()
for(s in 1:n_species){
rep_ = as_tibble(rep[s,,]) %>%
rownames_to_column() %>%
pivot_longer(-rowname) %>%
mutate(name = map_dbl(.x = name,
.f = function(x) as.numeric(str_remove(x, 'V')))) %>%
mutate(col = case_when(name %in% 1:serie_length ~ 'fit', TRUE ~ 'extra')  )
obs_ = occupancies[s,,start_point:(start_point+serie_length-1+time_out_fit)]
obs_ = tibble(year = 1:(serie_length+time_out_fit),
x = apply(obs_, 2, mean))
g[[s]] = ggplot(rep_)+
geom_boxplot(aes(x = name, y = value, group = name, color = col))+
geom_point(data = obs_, aes(x=year, y = x), size = 3)+
scale_y_continuous(limits = c(0,1))+
theme_bw()
}
cowplot::plot_grid(g[[1]], g[[2]], ncol=2)
## Add simulation ?
n_rep = 50
time_out_fit = 100
samples_length = dim(c_related_param[[1]])[1]
switchs = c(2, 1)
rep = structure(.Data = rep(0, n_species*n_rep*(serie_length+time_out_fit)),
.Dim = c(n_species, n_rep, serie_length+time_out_fit))
z = structure(.Data = rep(0, n_species*n_site*(serie_length+time_out_fit)),
.Dim = c(n_species, n_site, serie_length+time_out_fit))
for(r in 1:n_rep){
z[,,1] = obs[,,1]
draw = sample(1:samples_length, 1)
for(i in 2:(serie_length+time_out_fit)){
for(s in 1:n_species){
# Simulate patch dynamic (including uncertainty from the posterior distributions)
z[s,,i] = sapply(z[s,,i-1]*(1-inv.logit((e_related_param[[s]][draw,] %*% t(envt_matrix))[1,]))+
(1-z[s,,i-1])*inv.logit((c_related_param[[s]][draw,] %*% t(envt_matrix))[1,] ),
FUN = function(x) rbinom(1,1,x) )
}
}
rep[,r,] = apply(z[,,], c(1,3), mean)
}
# Reformat for plotting
g = list()
for(s in 1:n_species){
rep_ = as_tibble(rep[s,,]) %>%
rownames_to_column() %>%
pivot_longer(-rowname) %>%
mutate(name = map_dbl(.x = name,
.f = function(x) as.numeric(str_remove(x, 'V')))) %>%
mutate(col = case_when(name %in% 1:serie_length ~ 'fit', TRUE ~ 'extra')  )
obs_ = occupancies[s,,start_point:(start_point+serie_length-1+time_out_fit)]
obs_ = tibble(year = 1:(serie_length+time_out_fit),
x = apply(obs_, 2, mean))
g[[s]] = ggplot(rep_)+
geom_boxplot(aes(x = name, y = value, group = name, color = col))+
geom_point(data = obs_, aes(x=year, y = x), size = 3)+
scale_y_continuous(limits = c(0,1))+
theme_bw()
}
cowplot::plot_grid(g[[1]], g[[2]], ncol=2)
n_patch = 200
n_species = 2
# Define environmental optima
envt_opt = c(0.40, 0.6)
sim = simulate_MC(patches = n_patch,     # Number of patch
species = n_species,   # Number of species
kernel_exp = 0.001,    # Rate of decrease of disp. kernel (e.g. P(disp) = exp(-kernel_exp*dist(i,j)))
env1Scale = 100,       # Low spatial autocorrelation for envt (not important)
env_optima = envt_opt, # Environmental effects are Gaussian around optimum
env_niche_breadth = 0.09, # Niche breadth (~ sd of the Gaussian)
int_mat = matrix( c(0.05,0.0,
0.0,0.05) , nrow = 2, ncol = 2), # Interaction matrix
local_start = F) # Whether to start with clusered pop. or not
data_envt = get_envt(sim)
abundances = sim_to_matrix(sim)
occupancies = abund_to_occ(abundances)
plots_occupancies(occupancies)
n_patch = 200
n_species = 2
# Define environmental optima
envt_opt = c(0.40, 0.6)
sim = simulate_MC(patches = n_patch,     # Number of patch
species = n_species,   # Number of species
kernel_exp = 0.001,    # Rate of decrease of disp. kernel (e.g. P(disp) = exp(-kernel_exp*dist(i,j)))
env1Scale = 100,       # Low spatial autocorrelation for envt (not important)
env_optima = envt_opt, # Environmental effects are Gaussian around optimum
env_niche_breadth = 0.09, # Niche breadth (~ sd of the Gaussian)
int_mat = matrix( c(0.05,0.0,
0.0,0.05) , nrow = 2, ncol = 2), # Interaction matrix
local_start = F) # Whether to start with clusered pop. or not
data_envt = get_envt(sim)
abundances = sim_to_matrix(sim)
occupancies = abund_to_occ(abundances)
plots_occupancies(occupancies)
?simulate_MC
knitr::opts_chunk$set(echo = TRUE)
n_patch = 200
n_species = 2
# Define environmental optima
envt_opt = c(0.40, 0.6)
sim = simulate_MC(patches = n_patch,     # Number of patch
species = n_species,   # Number of species
kernel_exp = 0.001,    # Rate of decrease of disp. kernel (e.g. P(disp) = exp(-kernel_exp*dist(i,j)))
env1Scale = 100,       # Low spatial autocorrelation for envt (not important)
env_optima = envt_opt, # Environmental effects are Gaussian around optimum
env_niche_breadth = 0.09, # Niche breadth (~ sd of the Gaussian)
int_mat = matrix( c(0.05,0.1,
0.01,0.05) , nrow = 2, ncol = 2), # Interaction matrix
local_start = F) # Whether to start with clusered pop. or not
library(tidyverse)
library(TMDSpatial)
sim = simulate_MC(patches = n_patch,     # Number of patch
species = n_species,   # Number of species
kernel_exp = 0.001,    # Rate of decrease of disp. kernel (e.g. P(disp) = exp(-kernel_exp*dist(i,j)))
env1Scale = 100,       # Low spatial autocorrelation for envt (not important)
env_optima = envt_opt, # Environmental effects are Gaussian around optimum
env_niche_breadth = 0.09, # Niche breadth (~ sd of the Gaussian)
int_mat = matrix( c(0.05,0.1,
0.01,0.05) , nrow = 2, ncol = 2), # Interaction matrix
local_start = F) # Whether to start with clusered pop. or not
data_envt = get_envt(sim)
abundances = sim_to_matrix(sim)
occupancies = abund_to_occ(abundances)
plots_occupancies(occupancies)
sim$env.df
n_patch = 200
n_species = 2
# Define environmental optima
envt_opt = c(0.40, 0.6)
env.df = sim$env.df
landscape = sim$landscape
sim2 = simulate_MC(patches = n_patch,     # Number of patch
species = n_species,   # Number of species
kernel_exp = 0.001,    # Rate of decrease of disp. kernel (e.g. P(disp) = exp(-kernel_exp*dist(i,j)))
env1Scale = 100,       # Low spatial autocorrelation for envt (not important)
env_optima = envt_opt, # Environmental effects are Gaussian around optimum
env_niche_breadth = 0.09, # Niche breadth (~ sd of the Gaussian)
int_mat = matrix( c(0.05,0.0,
0.0,0.05) , nrow = 2, ncol = 2), # Interaction matrix
local_start = F,
env.df = env.df,
landscape = landscape)
head(sim$env.df)
sim$env.df[,-'time_run']
sim$env.df[,-c('time_run')]
sim$env.df %>% select(-time_run)
env.df = sim$env.df %>% select(-time_run)
landscape = sim$landscape
sim2 = simulate_MC(patches = n_patch,     # Number of patch
species = n_species,   # Number of species
kernel_exp = 0.001,    # Rate of decrease of disp. kernel (e.g. P(disp) = exp(-kernel_exp*dist(i,j)))
env1Scale = 100,       # Low spatial autocorrelation for envt (not important)
env_optima = envt_opt, # Environmental effects are Gaussian around optimum
env_niche_breadth = 0.09, # Niche breadth (~ sd of the Gaussian)
int_mat = matrix( c(0.05,0.0,
0.0,0.05) , nrow = 2, ncol = 2), # Interaction matrix
local_start = F,
env.df = env.df,
landscape = landscape)
sim2 = simulate_MC(patches = n_patch,     # Number of patch
species = n_species,   # Number of species
kernel_exp = 0.001,    # Rate of decrease of disp. kernel (e.g. P(disp) = exp(-kernel_exp*dist(i,j)))
env1Scale = 100,       # Low spatial autocorrelation for envt (not important)
env_optima = envt_opt, # Environmental effects are Gaussian around optimum
env_niche_breadth = 0.09, # Niche breadth (~ sd of the Gaussian)
int_mat = matrix( c(0.05,0.0,
0.0,0.05) , nrow = 2, ncol = 2), # Interaction matrix
local_start = F)
data_envt = get_envt(sim)
abundances = sim_to_matrix(sim)
occupancies = abund_to_occ(abundances)
plots_occupancies(occupancies)
knitr::opts_chunk$set(echo = TRUE, fig.width = 15)
n_patch = 200
n_species = 1
# Define environmental optima
envt_opt = c(0.35, 0.65)
sim = simulate_MC(patches = n_patch,     # Number of patch
species = n_species,   # Number of species
kernel_exp = 0.001,    # Rate of decrease of disp. kernel (e.g. P(disp) = exp(-kernel_exp*dist(i,j)))
env1Scale = 100,       # Low spatial autocorrelation for envt (not important)
env_optima = envt_opt, # Environmental effects are Gaussian around optimum
env_niche_breadth = 0.07, # Niche breadth (~ sd of the Gaussian)
int_mat = matrix( c(0.05,0.00,
0.00,0.05) , nrow = 2, ncol = 2), # Interaction matrix
local_start = F) # Whether to start with clusered pop. or not
# Define environmental optima
envt_opt = c(0.35, 0.65)
sim = simulate_MC(patches = n_patch,     # Number of patch
species = n_species,   # Number of species
kernel_exp = 0.001,    # Rate of decrease of disp. kernel (e.g. P(disp) = exp(-kernel_exp*dist(i,j)))
env1Scale = 100,       # Low spatial autocorrelation for envt (not important)
env_optima = envt_opt, # Environmental effects are Gaussian around optimum
env_niche_breadth = 0.07, # Niche breadth (~ sd of the Gaussian)
int_mat = matrix( c(0.05,0.00,
0.00,0.05) , nrow = 2, ncol = 2), # Interaction matrix
local_start = F) # Whether to start with clusered pop. or not
knitr::opts_chunk$set(echo = TRUE, fig.width = 15)
plot_envt_effect = function(env1, c_boot, e_boot, envt_opt){
p_boot = c_boot / (e_boot+c_boot)
to_p=tibble(x = env1,
median = apply(p_boot,2,median),
q_min = apply(p_boot,2,quantile, 0.025),
q_max = apply(p_boot,2,quantile, 0.975),
param = "expect_p")
to_c=tibble(x = env1,
median = apply(c_boot,2,median),
q_min = apply(c_boot,2,quantile, 0.025),
q_max = apply(c_boot,2,quantile, 0.975),
param = "col.")
to_e=tibble(x = env1,
median = apply(e_boot,2,median),
q_min = apply(e_boot,2,quantile, 0.025),
q_max = apply(e_boot,2,quantile, 0.975),
param = "ext.")
toplot = rbind(to_p, to_c, to_e)
ggplot(toplot, aes(x = x, y = median, color = param))+
geom_point()+
geom_ribbon(aes(ymin = q_min, ymax = q_max), alpha = 0.1)+
geom_vline(xintercept= envt_opt )+
scale_y_continuous(limits=c(0,1))+
theme_bw()
}
library(TMDSpatial)
library(R2jags)
# Some additional packages might be needed:
library(tidyverse)
n_patch = 200
n_species = 1
# Define environmental optima
envt_opt = c(0.35, 0.65)
sim = simulate_MC(patches = n_patch,     # Number of patch
species = n_species,   # Number of species
kernel_exp = 0.001,    # Rate of decrease of disp. kernel (e.g. P(disp) = exp(-kernel_exp*dist(i,j)))
env1Scale = 100,       # Low spatial autocorrelation for envt (not important)
env_optima = envt_opt, # Environmental effects are Gaussian around optimum
env_niche_breadth = 0.07, # Niche breadth (~ sd of the Gaussian)
int_mat = matrix( c(0.05,0.00,
0.00,0.05) , nrow = 2, ncol = 2), # Interaction matrix
local_start = F) # Whether to start with clusered pop. or not
sim = simulate_MC(patches = n_patch,     # Number of patch
species = n_species,   # Number of species
kernel_exp = 0.001,    # Rate of decrease of disp. kernel (e.g. P(disp) = exp(-kernel_exp*dist(i,j)))
env1Scale = 100,       # Low spatial autocorrelation for envt (not important)
env_optima = c(0.35, 0.65), # Environmental effects are Gaussian around optimum
env_niche_breadth = 0.07, # Niche breadth (~ sd of the Gaussian)
int_mat = matrix( c(0.05,0.00,
0.00,0.05) , nrow = 2, ncol = 2), # Interaction matrix
local_start = F) # Whether to start with clusered pop. or not
?simulate_MC
